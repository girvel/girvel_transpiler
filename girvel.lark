start: module

module: module_element*
module_element: include
    | generic_include
    | generic
    | function_definition
    | struct_definition

include: "include" ESCAPED_STRING

generic_include: "include" "<" generic_include_assignment ("," generic_include_assignment)* ">" ESCAPED_STRING
generic_include_assignment: CNAME ":" type_name

generic: "generic" CNAME

function_definition: signature "=>" expression
signature:  function_name ":" type_name arguments
function_name: (type_name "::")? CNAME _generic_postfix?
arguments: "(" variable_definition? ("," variable_definition)* ","? ")"

struct_definition: type_name ":" "struct" "{" (variable_definition ";")* "}"
type_name: CNAME _generic_postfix?

_generic_postfix: "<" CNAME ("," CNAME)* ">"

block: "{" (statement ";")* expression "}"
statement_block: "{" (statement ";")* "}"
statement: variable_definition
    | variable_assignment
    | variable_declaration
    | return
    | break
    | continue
    | statement_block
    | statement_if
    | statement_loop
    | call
expression: block
    | if
    | operation
    | call
    | identifier
    | constructor
    | LITERAL

variable_definition: MUTABILITY_MODIFIER? type_name CNAME
variable_assignment: identifier ASSIGNMENT_OPERATOR expression
variable_declaration: variable_definition "=" expression
MUTABILITY_MODIFIER: "mut"

return: "return" expression
break: "break"
continue: "continue"

identifier: identifier_piece ("." identifier_piece)*
identifier_piece: CNAME | call

if: "if" expression block "else" block
statement_if: "if" expression statement_block ("else" statement_block)?

statement_loop: "loop" statement

operation: infix_operation | prefix_operation
infix_operation: expression INFIX_OPERATOR expression
prefix_operation: PREFIX_OPERATOR expression

ASSIGNMENT_OPERATOR: "="
    | "+="
    | "-="
    | "*="
    | "/="
    | "%="
    | "|="
    | "&="
    | "^="
    | ">>="
    | "<<="

INFIX_OPERATOR: "+"
    | "-"
    | "*"
    | "/"
    | "%"
    | "=="
    | "!="
    | ">"
    | "<"
    | ">="
    | "<="
    | "||"
    | "&&"
    | "&"
    | "|"
    | "^"
    | ">>"
    | "<<"

PREFIX_OPERATOR: "-" | "+" | "!" | "~"

call: function_name "(" expression? ("," expression)* ","? ")"

constructor: type_name "{" expression? ("," expression)* ","? "}"

LITERAL: SIGNED_INT | SIGNED_FLOAT | ESCAPED_STRING | CHAR
CHAR: "'" /./ "'"

%import common.WS
%import common.CNAME
%import common.ESCAPED_STRING
%import common.SIGNED_INT
%import common.SIGNED_FLOAT
%import common.CPP_COMMENT
%ignore WS
%ignore CPP_COMMENT